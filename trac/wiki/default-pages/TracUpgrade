= アップグレードの説明 = #UpgradeInstructions
[[TracGuideToc]]

== 一般的な手順 == #Instructions

通常、 Trac を新しいバージョンにアップグレードするときに、 7 ステップを踏まなければなりません: 

=== 1. Trac のコードを更新する === #UpdatetheTracCode

TracInstall または、あなたの OS に合った方法で新しいバージョンの Trac を取得してください。

`easy_install` を使って、 0.11 のバージョンの Trac をインストールしていた場合は、最も簡単に Trac をアップグレードできます。

{{{
# easy_install --upgrade Trac==0.12b1
}}}
(これは、 0.12 のベータ 1 がリリースされたときのものです)

手で (OS 特有でない) アップグレードをするのであれば、インストールを実行する前に起動中の Trac サーバを停止してください。 "ホット" アップグレードは問題を生じることが多いです。特に Windows では出来ないと考えてください ([trac:ticket:7625 #7265])。

すでに存在する Trac のコードを削除するには、 Python の `lib/site-packages` ディレクトリから `trac` ディレクトリか、 Trac の .egg の古いバージョンを削除します。
site-packages ディレクトリの位置は OS のシステム、および Python のインストールパスにより異なりますが、一般的には以下の位置にあります:
 * Linux の場合: `/usr/lib/python2.X/site-packages`
 * Windows の場合: `C:\Python2.X\lib\site-packages`
 * MacOSX の場合: `/Library/Python/2.X/site-packages`

また、 `share/trac` (正確な位置はプラットフォームに依存しますが一般的にはこの位置です。) ディレクトリ内の `cgi-bin`, `htdocs`, `templates`, `wiki-default` といったディレクトリを削除してもかまいません。 (訳注: 0.11 では、これらのディレクトリは `site-packages/trac` の配下に移動しています)

このクリーンアップは必須ではありませんが、あとでトラブルシュートを行う場合の切り分けが容易になります。すでに使われていない前のリリースのコードやテンプレートを見るなどという時間の浪費をしたくないのであれば、削除しておく方が楽です。もちろん、ファイルを削除する前にバックアップを作成する方が良いでしょう。

=== 2. TracEnvironment をアップグレードする === #UpgradetheTracEnvironment

Environment のアップグレードは、マイナーバージョンアップに特別な注意書きがない限り、不要です。 

アップグレードした Trac がロードされると、アップグレードする必要があるインスタンスが表示されます。アップグレードはオートメーションされたスクリプトを手で実行します。これらのスクリプトでは [TracAdmin trac-admin] を使用します。
{{{
trac-admin /path/to/projenv upgrade
}}}

このコマンドはもし TracEnvironment がすでに最新の状態になっているときは、何もしません。

Note: データベースのバックアップはアップグレード時に自動で行われます。
この機能は最近の更新で、データベースバックエンドに PostgreSQL や MySQL を使用している場合にも対応しましたが、失敗してしまう場合は手動でバックアップしてください。その後、バックアップをスキップしてアップグレードを行うために、下記のコマンドを実行してください:
{{{
trac-admin /path/to/projenv upgrade --no-backup
}}}

=== 3. Trac ドキュメントを更新する === #UpdatetheTracDocumentation

すべての [TracEnvironment Trac Environment] で、インストールされたバージョンの Trac ドキュメントのコピーを含んでいます。新しくインストールした Trac のドキュメントと同期を取りたいでしょう。 [TracAdmin trac-admin] がドキュメントを更新するコマンドを提供しています:
{{{
trac-admin /path/to/projenv wiki upgrade
}}}

当然このプロシージャはあなたの `WikiStart` ページ (訳注: `InterMapText` も) をまったく変更せず、そのままに残しておきます。

=== 4. Trac Environment とソースコードリポジトリの再同期 ===　#a4.ResynchronizetheTracEnvironmentAgainsttheSourceCodeRepository

Trac でソースコードをブラウズしているときに "[http://trac.edgewall.org/ticket/6120 リポジトリにチェンジセット ??? が存在しません]" のようなエラーが出る場合は、それぞれの [TracEnvironment Trac environment] のソースコードリポジトリと再同期をする必要があります。

{{{
trac-admin /path/to/projenv repository resync '*'
}}}

=== 5. 静的リソースをリフレッシュする === #a5.Refreshstaticresources

もし、静的リソースを直接配布できる ( URL /chrome/ を使用してアクセス) ようにウェブサーバをセットアップしていたら、同じくコマンドを使用してそれらをリフレッシュする必要があります:
{{{
trac-admin /path/to/env deploy /deploy/path
}}}
このコマンドは、新しい Trac のバージョンとそのプラグインから `/deploy/path` に静的リソースと CGI スクリプト (trac.wsgi, など) を抽出します。

いくつかのウェブブラウザは CSS や Javascript のファイルを強力な方法でキャッシュします。したがって、強制的にブラウザのキャッシュをリフレッシュする必要があります ( あなたの Trac ユーザにもそう伝えてください !)。

=== 6. 特定の Trac バージョンでの特記事項  === #a6.StepsspecifictoagivenTracversion
==== Trac 0.11 から Trac 0.12 にアップグレードする ==== #UpgradingfromTrac0.11toTrac0.12
===== Python 2.3 サポート ===== #Python2.3nolongersupported
現在 Python 2.4 以降 をサポートします。

===== SQLite v3.x ===== #SQLitev3.xrequired
SQLite v2.x のサポートは終了しました。もしいまだに Trac で SQLite v2.x のデータベースを使用しているようならば、まず最初に SQLite v3.x に変換する必要があります。詳細は [trac:PySqlite#UpgradingSQLitefrom2.xto3.x] を参照して下さい。

===== 複数のリポジトリのサポート===== #MultipleRepositorySupport
Trac に複数のリポジトリを追加する予定であるならば、今では複数のリポジトリを扱えるようになっています。詳細については、 [TracRepositoryAdmin#Migration 単一リポジトリからの移行手順] を参照して下さい。

もし単一のリポジトリでの運用を行なっていたとしてもこの手順は興味深いものとなりえます。なぜなら、この方法によってリクエスト毎に発生する潜在的に負荷の高い再同期のチェックを避けることができるからです。

===== 向上したリポジトリの再同期 ===== #Improvedrepositorysynchronization
複数のリポジトリをサポートするのに加えて、 Trac と リポジトリの同期をより効果的に行なう新しい方法が実装されました。

バージョン 0.11 と同様に post-comit フックを使用した同期方法を続けることもできますが、[TracRepositoryAdmin#Synchronization リポジトリの同期方法] や [TracRepositoryAdmin#ExplicitSync 明示的な同期] に書かれている方法の方が、より効果的な同期を行なうことができ、多かれ少なかれ、複数のリポジトリを扱う際に必須となります。

Note: もし、 `trac-post-commit-hook` を使用していたならば、上記を参照して、新しいフックに ''アップグレードすることを強くお勧めします'' 。なぜなら、古いフックはデフォルトのリポジトリ以外では動きません。そしてこの場合、適切な通知のトリガーとなりません。

==== Trac 0.10 から Trac 0.11 へのアップグレード ==== #UpgradingfromTrac0.10toTrac0.11
===== テンプレート と スタイルシート ===== #SiteTemplatesandStyles
テンプレートエンジンが Trac 0.11 から Genshi に変わりました。詳細については、 TracInterfaceCustomization を参照して下さい。

もし、TracEnvironment の `templates` ディレクトリの中のカスタマイズされた CSS や 修正したテンプレートを使用しているならば、 Genshi のスタイルに変換する必要があります。カスタマイズしたスタイルシートを使い続けるためには、[TracInterfaceCustomization#SiteAppearance サイトの外観] の手順に従ってください。

===== Trac マクロプラグイン ===== #TracMacrosPlugins
[trac:ClearSilver ClearSilver] と HDF が使用されなくなったことで、古いスタイルの Wiki マクロ は使用できなくなります。そのため Trac マクロを適応させる必要があるでしょう; 新しいスタイルのマクロに変更する必要があれば WikiMacros を参照してください。新しいスタイルにコンバートした後、配置するディレクトリは wiki-macros ではなく、 plugins を使用してください。 wiki-macros ディレクトリからマクロやプラグインを探すことはもうありません。

===== FCGI/WSGI/CGI を使用する場合 ===== #ForFCGIWSGICGIusers
CGI で Trac を起動している場合、以下のコマンドを実行して trac.*gi ファイルを取得してください:
{{{
trac-admin /path/to/env deploy /deploy/directory/path
}}}

このコマンドでは、デプロイ用ディレクトリを作成します。デプロイ用ディレクトリには `cgi-bin` と `htdocs` の二つのサブディレクトリが含まれています。 Apache の `httpd.conf` を新しい `trac.cgi` と `htdocs` の場所に更新してください。

===== Web アドミンプラグインのインテグレーション =====
もし、 Web アドミンプラグインをインストールしていたら、 Trac 0.11 以降より、 Trac のコードベースの一部となっているのでアンインストールできます。

=== 7. Web サーバを再起動する === #RestarttheWebServer

[wiki:TracCgi CGI] 以外で起動している場合は、 Web サーバを再起動して、新しい Trac コードをリロードしてください。

== 既知の問題 == #KnownIssues

=== 複数プロジェクトのホストに関して === #parentdir
複数のプロジェクトをホストした場合に、配下のプロジェクトのうち一つのプロジェクトで、プラグインの一つが動作していないとき、配下のすべてのプロジェクトではそのプラグインは動作していません。

=== Wiki のアップグレード ===
`trac-admin` は新しいバージョンでは存在しない以前のバージョンの Wiki ページを削除や移動しません。


== データベースの変更 == #ChangingDatabaseBackend
=== SQLite から PostgreSQL へ === #SQLitetoPostgreSQL

[http://trac-hacks.org trac-hacks.org] の [http://trac-hacks.org/wiki/SqliteToPgScript sqlite2pg] は SQLite のデータベースを PostgreSQL に移行するためのサポートをするスクリプトです。 

== より古いバージョン == #OlderVersions

さらに前のバージョンからのアップグレードについては [trac:wiki:0.10/TracUpgrade#SpecificVersions] を最初に参照してください。

-----
See also: TracGuide, TracInstall